📖 读取文件: tests/grade-check.txt
📝 源代码:
int checkGrade() {
    let grade = 0;
    let score = 70;
    {
      let i = 0;
      score = score + 1;
    }
    
    if (score >= 90) {
        grade = 1;  // A级
        let bonusA = 10;
        {
          grade = 10;
        }
        grade = 111;
    } else if (score >= 80) {
      let bonusB = 5;
      grade = 2;
      let grade = 2;  // B级
      {
        grade = grade + 20;
        let c = 100;
      }
      let cc = 1110;
      cc = 222;
    } else if (score >= 60) {
      grade = 3; // C 级
    }
    let k = 9990;

    if (k) {
      let jj = 111;
      {
        let j = 1111;
        if (j > 0) {
          j = 222;
        }
        let j11= 1231;
        {
          let xx = 1;
        }
      }
      let j111 = 123123;
    }
    return grade;
}

🔍 解析源代码...
⚙️ 编译为汇编...
📊 生成控制流图...

📋 控制流图 (CFG):
基本块: checkGrade_entry_block
  [入口块]
  语句:
    - 声明let变量 grade
    - 声明let变量 score
  前驱块: 无
  后继块: checkGrade_block_2

基本块: checkGrade_block_2
  语句:
    - 代码块 
      {
          - 声明let变量 i
          - 赋值 score = 变量: score + 数字: 1
      }
  前驱块: checkGrade_entry_block
  后继块: checkGrade_block_3

基本块: checkGrade_block_3
  语句:
    - 变量: score >= 数字: 90
  前驱块: checkGrade_block_2
  后继块: checkGrade_block_4, checkGrade_block_7

基本块: checkGrade_block_4
  语句:
    - 赋值 grade = 数字: 1
    - 声明let变量 bonusA
  前驱块: checkGrade_block_3
  后继块: checkGrade_block_5

基本块: checkGrade_block_5
  语句:
    - 代码块 
      {
          - 赋值 grade = 数字: 10
      }
    - 赋值 grade = 数字: 111
  前驱块: checkGrade_block_4
  后继块: checkGrade_block_16

基本块: checkGrade_block_7
  语句:
    - 变量: score >= 数字: 80
  前驱块: checkGrade_block_3
  后继块: checkGrade_block_8, checkGrade_block_11

基本块: checkGrade_block_8
  语句:
    - 声明let变量 bonusB
    - 赋值 grade = 数字: 2
    - 声明let变量 grade
  前驱块: checkGrade_block_7
  后继块: checkGrade_block_9

基本块: checkGrade_block_16
  语句:
    - 声明let变量 k
  前驱块: checkGrade_block_5, checkGrade_block_9, checkGrade_block_12, checkGrade_block_11
  后继块: checkGrade_block_17

基本块: checkGrade_block_9
  语句:
    - 代码块 
      {
          - 赋值 grade = 变量: grade + 数字: 20
          - 声明let变量 c
      }
    - 声明let变量 cc
    - 赋值 cc = 数字: 222
  前驱块: checkGrade_block_8
  后继块: checkGrade_block_16

基本块: checkGrade_block_11
  语句:
    - 变量: score >= 数字: 60
  前驱块: checkGrade_block_7
  后继块: checkGrade_block_12, checkGrade_block_16

基本块: checkGrade_block_17
  语句:
    - 变量: k
  前驱块: checkGrade_block_16
  后继块: checkGrade_block_18, checkGrade_block_26

基本块: checkGrade_block_12
  语句:
    - 赋值 grade = 数字: 3
  前驱块: checkGrade_block_11
  后继块: checkGrade_block_16

基本块: checkGrade_block_18
  语句:
    - 声明let变量 jj
    - 声明let变量 j
  前驱块: checkGrade_block_17
  后继块: checkGrade_block_19

基本块: checkGrade_block_19
  语句:
    - 变量: j > 数字: 0
  前驱块: checkGrade_block_18
  后继块: checkGrade_block_20, checkGrade_block_22

基本块: checkGrade_block_20
  语句:
    - 赋值 j = 数字: 222
  前驱块: checkGrade_block_19
  后继块: checkGrade_block_22

基本块: checkGrade_block_26
  语句:
    - 返回语句
  前驱块: checkGrade_block_23, checkGrade_block_17
  后继块: checkGrade_block_1

基本块: checkGrade_block_22
  语句:
    - 声明let变量 j11
  前驱块: checkGrade_block_20, checkGrade_block_19
  后继块: checkGrade_block_23

基本块: checkGrade_block_1
  [出口块]
  语句:
    - (空)
  前驱块: checkGrade_block_26
  后继块: 无

基本块: checkGrade_block_23
  语句:
    - 代码块 
      {
          - 声明let变量 xx
      }
    - 声明let变量 j111
  前驱块: checkGrade_block_22
  后继块: checkGrade_block_26

控制流边:
  checkGrade_entry_block → checkGrade_block_2
  checkGrade_block_2 → checkGrade_block_3
  checkGrade_block_3 → checkGrade_block_4
  checkGrade_block_3 → checkGrade_block_7
  checkGrade_block_4 → checkGrade_block_5
  checkGrade_block_5 → checkGrade_block_16
  checkGrade_block_7 → checkGrade_block_8
  checkGrade_block_7 → checkGrade_block_11
  checkGrade_block_8 → checkGrade_block_9
  checkGrade_block_16 → checkGrade_block_17
  checkGrade_block_9 → checkGrade_block_16
  checkGrade_block_11 → checkGrade_block_12
  checkGrade_block_11 → checkGrade_block_16
  checkGrade_block_17 → checkGrade_block_18
  checkGrade_block_17 → checkGrade_block_26
  checkGrade_block_12 → checkGrade_block_16
  checkGrade_block_18 → checkGrade_block_19
  checkGrade_block_19 → checkGrade_block_20
  checkGrade_block_19 → checkGrade_block_22
  checkGrade_block_20 → checkGrade_block_22
  checkGrade_block_26 → checkGrade_block_1
  checkGrade_block_22 → checkGrade_block_23
  checkGrade_block_23 → checkGrade_block_26

⚙️ 生成汇编代码...
🚀 运行汇编代码...

运行函数: checkGrade
汇编代码:
; Function: checkGrade
checkGrade:

checkGrade_entry_block:
  sub esp, 2            ; 为2个函数级变量分配栈空间
  mov eax, 0
  si -1              ; 初始化 grade
  mov eax, 70
  si -2              ; 初始化 score
  jmp checkGrade_block_2

checkGrade_block_2:
  sub esp, 1            ; 为1个块级变量分配栈空间
  mov eax, 0
  si -3              ; 初始化 i
  li -2
  push eax
  mov eax, 1
  mov ebx, eax
  pop eax
  add eax, ebx
  si -2              ; 赋值给 score
  add esp, 1            ; 释放块级变量栈空间
  jmp checkGrade_block_3

checkGrade_block_3:
  li -2
  push eax
  mov eax, 90
  mov ebx, eax
  pop eax
  cmp eax, ebx
  jge checkGrade_block_4     ; 如果 >= 则跳转到true分支
  jmp checkGrade_block_7    ; 否则跳转到false分支

checkGrade_block_4:
  sub esp, 1            ; 为1个块级变量分配栈空间
  mov eax, 1
  si -1              ; 赋值给 grade
  mov eax, 10
  si -3              ; 初始化 bonusA
  add esp, 1            ; 释放块级变量栈空间
  jmp checkGrade_block_5

checkGrade_block_5:
  mov eax, 10
  si -1              ; 赋值给 grade
  mov eax, 111
  si -1              ; 赋值给 grade
  jmp checkGrade_block_16

checkGrade_block_7:
  li -2
  push eax
  mov eax, 80
  mov ebx, eax
  pop eax
  cmp eax, ebx
  jge checkGrade_block_8     ; 如果 >= 则跳转到true分支
  jmp checkGrade_block_11    ; 否则跳转到false分支

checkGrade_block_8:
  sub esp, 2            ; 为2个块级变量分配栈空间
  mov eax, 5
  si -3              ; 初始化 bonusB
  mov eax, 2
  si -1              ; 赋值给 grade
  mov eax, 2
  si -4              ; 初始化 grade
  add esp, 2            ; 释放块级变量栈空间
  jmp checkGrade_block_9

checkGrade_block_16:
  sub esp, 1            ; 为1个块级变量分配栈空间
  mov eax, 9990
  si -3              ; 初始化 k
  add esp, 1            ; 释放块级变量栈空间
  jmp checkGrade_block_17

checkGrade_block_9:
  sub esp, 1            ; 为1个块级变量分配栈空间
  sub esp, 1            ; 为1个块级变量分配栈空间
  li -1
  push eax
  mov eax, 20
  mov ebx, eax
  pop eax
  add eax, ebx
  si -1              ; 赋值给 grade
  mov eax, 100
  si -4              ; 初始化 c
  add esp, 1            ; 释放块级变量栈空间
  mov eax, 1110
  si -3              ; 初始化 cc
  mov eax, 222
  si -3              ; 赋值给 cc
  add esp, 1            ; 释放块级变量栈空间
  jmp checkGrade_block_16

checkGrade_block_11:
  li -2
  push eax
  mov eax, 60
  mov ebx, eax
  pop eax
  cmp eax, ebx
  jge checkGrade_block_12     ; 如果 >= 则跳转到true分支
  jmp checkGrade_block_16    ; 否则跳转到false分支

checkGrade_block_17:
  mov eax, 0
  jmp checkGrade_block_18

checkGrade_block_12:
  mov eax, 3
  si -1              ; 赋值给 grade
  jmp checkGrade_block_16

checkGrade_block_18:
  sub esp, 2            ; 为2个块级变量分配栈空间
  mov eax, 111
  si -3              ; 初始化 jj
  mov eax, 1111
  si -4              ; 初始化 j
  add esp, 2            ; 释放块级变量栈空间
  jmp checkGrade_block_19

checkGrade_block_19:
  mov eax, 0
  push eax
  mov eax, 0
  mov ebx, eax
  pop eax
  cmp eax, ebx
  jg checkGrade_block_20     ; 如果 > 则跳转到true分支
  jmp checkGrade_block_22    ; 否则跳转到false分支

checkGrade_block_20:
  mov eax, 222
  ; 未找到变量 j
  jmp checkGrade_block_22

checkGrade_block_26:
  li -1              ; 返回函数级变量 grade
  add esp, 2            ; 释放所有变量栈空间
  mov ebx, 0              ; 清理 ebx
  ret

checkGrade_block_22:
  sub esp, 1            ; 为1个块级变量分配栈空间
  mov eax, 1231
  si -3              ; 初始化 j11
  add esp, 1            ; 释放块级变量栈空间
  jmp checkGrade_block_23

checkGrade_block_1:
  add esp, 2            ; 释放所有变量栈空间
  mov eax, 0              ; 默认返回值
  mov ebx, 0              ; 清理 ebx
  ret              ; 函数结束返回

checkGrade_block_23:
  sub esp, 1            ; 为1个块级变量分配栈空间
  sub esp, 1            ; 为1个块级变量分配栈空间
  mov eax, 1
  si -4              ; 初始化 xx
  add esp, 1            ; 释放块级变量栈空间
  mov eax, 123123
  si -3              ; 初始化 j111
  add esp, 1            ; 释放块级变量栈空间
  jmp checkGrade_block_26

DEBUG: si -1 - storing ax(0) to bp(1023) + -1 = 1022
DEBUG: si -2 - storing ax(70) to bp(1023) + -2 = 1021
DEBUG: si -3 - storing ax(0) to bp(1023) + -3 = 1020
DEBUG: li -2 - loading from bp(1023) + -2 = 1021, value = 70
DEBUG: si -2 - storing ax(71) to bp(1023) + -2 = 1021
DEBUG: li -2 - loading from bp(1023) + -2 = 1021, value = 71
DEBUG: li -2 - loading from bp(1023) + -2 = 1021, value = 71
DEBUG: li -2 - loading from bp(1023) + -2 = 1021, value = 71
DEBUG: si -1 - storing ax(3) to bp(1023) + -1 = 1022
DEBUG: si -3 - storing ax(9990) to bp(1023) + -3 = 1020
DEBUG: si -3 - storing ax(111) to bp(1023) + -3 = 1020
DEBUG: si -4 - storing ax(1111) to bp(1023) + -4 = 1019
DEBUG: si -3 - storing ax(1231) to bp(1023) + -3 = 1020
DEBUG: si -4 - storing ax(1) to bp(1023) + -4 = 1019
DEBUG: si -3 - storing ax(123123) to bp(1023) + -3 = 1020
DEBUG: li -1 - loading from bp(1023) + -1 = 1022, value = 3

VM 运行结果:
成功: true
输出: 
执行周期: 84
AX 寄存器值: 3
BX 寄存器值: 0
SP 寄存器值: 1023
BP 寄存器值: 1023

✅ 运行成功!
📊 结果: 函数 checkGrade: AX = 3

📋 详细结果:

函数: checkGrade
返回值 (AX): 3
寄存器状态:
  AX: 3
  BX: 0
  SP: 1023
  BP: 1023
