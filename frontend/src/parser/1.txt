1+2*3

operatorStack = []
oprandStack = []

astnode = null

第1步,解析到 1

operatorStack = []
oprandStack = [1]
astnode = null

第2步，解析到 +
+优先级高于 0
operatorStack = [+]
oprandStack = [1]
astnode = null

第3步，解析到 2

operatorStack = [+]
oprandStack = [1, 2]
astnode = null

第4步，解析到 * 
* 优先级高于 +，入栈
operatorStack = [+, *]
oprandStack = [1, 2]
astnode = null

第5步，解析到 3

operatorStack = [+, *]
oprandStack = [1, 2, 3]
astnode = null

第6步，解析到 end，开始处理，operatorStack 弹出 *，oprandStack，弹出3(right),2(left)

operatorStack = [+]
oprandStack = [1]

生成 astnode
astnode = { op: *,  left: 2, right: 3 }

第7步，operatorStack 弹出 +，oprandStack，弹出1(left)
operatorStack = []
oprandStack = []

生成 astnode
astnode = { op: +, left: 1, right: { op: *,  left: 2, right: 3 }}