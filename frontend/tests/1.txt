表达式: 1+2*3

初始状态:
operatorStack = []
operandStack = []
astnode = null

第1步: 解析到数字 1
- 数字直接入操作数栈
operatorStack = []
operandStack = [1]
astnode = null

第2步: 解析到操作符 +
- + 优先级高于空栈（0），直接入栈
operatorStack = [+]
operandStack = [1]
astnode = null

第3步: 解析到数字 2
- 数字直接入操作数栈
operatorStack = [+]
operandStack = [1, 2]
astnode = null

第4步: 解析到操作符 *
- * 优先级高于 +，直接入栈
operatorStack = [+, *]
operandStack = [1, 2]
astnode = null

第5步: 解析到数字 3
- 数字直接入操作数栈
operatorStack = [+, *]
operandStack = [1, 2, 3]
astnode = null

第6步: 解析到结束标记，开始处理剩余操作符
- 弹出操作符 *，弹出操作数 3(right), 2(left)
- 生成AST节点: { op: *, left: 2, right: 3 }
- AST节点入操作数栈
operatorStack = [+]
operandStack = [1, AST(2*3)]
astnode = AST(2*3)

第7步: 处理剩余操作符 +
- 弹出操作符 +，弹出操作数 AST(2*3)(right), 1(left)
- 生成最终AST节点: { op: +, left: 1, right: AST(2*3) }
operatorStack = []
operandStack = []
astnode = AST(1+(2*3))