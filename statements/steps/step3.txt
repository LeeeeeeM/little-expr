[0]: call 2     ; 调用main函数 ; _start
[1]: exit                  ; 退出程序
[2]: push ebp ; function_main
[3]: mov ebp, esp
[4]: sub esp, 2            ; 为2个函数级变量分配栈空间
[5]: mov eax, 0         ; 加载常量 0
[6]: SI -1              ; 初始化 sum
[7]: mov eax, 0         ; 加载常量 0
[8]: SI -2              ; 初始化 i
[9]: LI -2              ; 加载变量 i ; loop_0, continue_2
[10]: push eax              ; 保存左操作数到栈
[11]: mov eax, 5         ; 加载常量 5
[12]: mov ebx, eax          ; 右操作数到ebx
[13]: pop eax               ; 从栈恢复左操作数
[14]: cmp eax, ebx          ; 比较操作数
[15]: jge 40
[16]: sub esp, 1            ; 为1个块级变量分配栈空间
[17]: LI -2              ; 加载变量 i
[18]: push eax              ; 保存左操作数到栈
[19]: mov eax, 2         ; 加载常量 2
[20]: mov ebx, eax          ; 右操作数到ebx
[21]: pop eax               ; 从栈恢复左操作数
[22]: imul eax, ebx         ; 执行乘法
[23]: SI -3              ; 初始化 let temp
[24]: LI -1              ; 加载变量 sum
[25]: push eax              ; 保存左操作数到栈
[26]: LI -3              ; 加载变量 temp
[27]: mov ebx, eax          ; 右操作数到ebx
[28]: pop eax               ; 从栈恢复左操作数
[29]: add eax, ebx          ; 执行加法
[30]: SI -1              ; 存储到 sum
[31]: LI -2              ; 加载变量 i
[32]: push eax              ; 保存左操作数到栈
[33]: mov eax, 1         ; 加载常量 1
[34]: mov ebx, eax          ; 右操作数到ebx
[35]: pop eax               ; 从栈恢复左操作数
[36]: add eax, ebx          ; 执行加法
[37]: SI -2              ; 存储到 i
[38]: add esp, 1            ; 释放块级变量栈空间
[39]: jmp 9
[40]: LI -1              ; 加载变量 sum ; end_1, break_3
[41]: push eax        ; 参数1入栈
[42]: PRT             ; 系统调用print
[43]: add esp, 1      ; 清理栈参数
[44]: mov eax, 0         ; 加载常量 0
[45]: SI -100              ; 初始化for循环变量 j
[46]: LI -100              ; 加载变量 j ; loop_4
[47]: push eax              ; 保存左操作数到栈
[48]: mov eax, 3         ; 加载常量 3
[49]: mov ebx, eax          ; 右操作数到ebx
[50]: pop eax               ; 从栈恢复左操作数
[51]: cmp eax, ebx          ; 比较操作数
[52]: jge 99
[53]: sub esp, 2            ; 为2个块级变量分配栈空间
[54]: LI -100              ; 加载变量 j
[55]: push eax              ; 保存左操作数到栈
[56]: mov eax, 1         ; 加载常量 1
[57]: mov ebx, eax          ; 右操作数到ebx
[58]: pop eax               ; 从栈恢复左操作数
[59]: add eax, ebx          ; 执行加法
[60]: SI -3              ; 初始化 let multiplier
[61]: LI -1              ; 加载变量 sum
[62]: push eax              ; 保存左操作数到栈
[63]: LI -3              ; 加载变量 multiplier
[64]: mov ebx, eax          ; 右操作数到ebx
[65]: pop eax               ; 从栈恢复左操作数
[66]: imul eax, ebx         ; 执行乘法
[67]: SI -4              ; 初始化 product
[68]: LI -4              ; 加载变量 product
[69]: push eax              ; 保存左操作数到栈
[70]: mov eax, 30         ; 加载常量 30
[71]: mov ebx, eax          ; 右操作数到ebx
[72]: pop eax               ; 从栈恢复左操作数
[73]: cmp eax, ebx          ; 比较操作数
[74]: jle 86
[75]: sub esp, 1            ; 为1个块级变量分配栈空间
[76]: mov eax, 10         ; 加载常量 10
[77]: SI -3              ; 初始化 let bonus
[78]: LI -4              ; 加载变量 product
[79]: push eax              ; 保存左操作数到栈
[80]: LI -3              ; 加载变量 bonus
[81]: mov ebx, eax          ; 右操作数到ebx
[82]: pop eax               ; 从栈恢复左操作数
[83]: add eax, ebx          ; 执行加法
[84]: SI -4              ; 存储到 product
[85]: add esp, 1            ; 释放块级变量栈空间
[86]: LI -4              ; 加载变量 product ; else_8, end_9
[87]: push eax        ; 参数1入栈
[88]: PRT             ; 系统调用print
[89]: add esp, 1      ; 清理栈参数
[90]: add esp, 2            ; 释放块级变量栈空间
[91]: LI -100              ; 加载变量 j ; continue_6
[92]: push eax              ; 保存左操作数到栈
[93]: mov eax, 1         ; 加载常量 1
[94]: mov ebx, eax          ; 右操作数到ebx
[95]: pop eax               ; 从栈恢复左操作数
[96]: add eax, ebx          ; 执行加法
[97]: SI -100             ; 存储到变量 j
[98]: jmp 46
[99]: mov eax, 0         ; 加载常量 0 ; end_5, break_7
[100]: mov esp, ebp             ; 恢复栈指针
[101]: pop ebp                  ; 恢复调用者BP
[102]: ret                      ; 返回调用者
