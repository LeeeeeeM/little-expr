int fibonacci(int n) {
  if (n <= 1) {
    return n;
  }
  
  int a = 0;
  int b = 1;
  int i = 2;
  
  while (i <= n) {
    int temp = a + b;
    a = b;
    b = temp;
    i = i + 1;
  }
  
  return b;
}

int isPrime(int num) {
  if (num <= 1) {
    return 0;
  }
  
  if (num == 2) {
    return 1;
  }
  
  int i = 2;
  while (i * i <= num) {
    int temp = num / i;
    if (temp * i == num) {
      return 0;
    }
    i = i + 1;
  }
  
  return 1;
}

int factorial(int n) {
  if (n <= 1) {
    return 1;
  }
  
  int result = 1;
  int i = 2;
  
  while (i <= n) {
    result = result * i;
    i = i + 1;
  }
  
  return result;
}

int complexMath(int x, int y) {
  int result = 0;
  
  if (x > y) {
    int i = 1;
    while (i <= x) {
      if (i % 2 == 0) {
        result = result + i * i;
      } else {
        result = result + i;
      }
      i = i + 1;
    }
  } else {
    int j = y;
    while (j >= 1) {
      if (j % 3 == 0) {
        result = result + j * 2;
      } else {
        result = result + j;
      }
      j = j - 1;
    }
  }
  
  return result;
}

int moduloDemo(int n) {
  int result = 0;
  
  int i = 1;
  while (i <= n) {
    if (i % 4 == 0) {
      result = result + i * 3;
    } else if (i % 3 == 0) {
      result = result + i * 2;
    } else if (i % 2 == 0) {
      result = result + i;
    } else {
      result = result + i % 5;
    }
    i = i + 1;
  }
  
  return result;
}

int main() {
  int sum = 0;
  int count = 1;
  int maxCount = 8;
  
  print(0);
  
  while (count <= maxCount) {
    if (count <= 3) {
      int fib = fibonacci(count);
      sum = sum + fib;
      print(sum);
    } else if (count <= 5) {
      int fact = factorial(count - 2);
      sum = sum + fact;
      print(sum);
    } else if (count <= 7) {
      int complex = complexMath(count, count - 1);
      sum = sum + complex;
      print(sum);
    } else {
      int modulo = moduloDemo(count);
      sum = sum + modulo;
      print(sum);
    }
    
    count = count + 1;
  }
  
  int finalResult = complexMath(sum, maxCount);
  print(finalResult);
  
  int moduloTest = moduloDemo(10);
  print(moduloTest);
  
  return 0;
}